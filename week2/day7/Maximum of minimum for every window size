class Solution {
    static int[] maxOfMin(int[] arr, int n) {
        int[] result = new int[n];
        int[] nextSmaller = new int[n];
        int[] prevSmaller = new int[n];

        Stack<Integer> stack = new Stack<>();

        Arrays.fill(nextSmaller, n);
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {
                nextSmaller[stack.pop()] = i;
            }
            stack.push(i);
        }

        stack.clear();
        Arrays.fill(prevSmaller, -1);
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && arr[stack.peek()] >= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                prevSmaller[i] = stack.peek();
            }
            stack.push(i);
        }

        int[] maxForWindowSize = new int[n + 1];
        for (int i = 0; i < n; i++) {
            int length = nextSmaller[i] - prevSmaller[i] - 1;
            maxForWindowSize[length] = Math.max(maxForWindowSize[length], arr[i]);
        }

        for (int i = n - 1; i >= 1; i--) {
            maxForWindowSize[i] = Math.max(maxForWindowSize[i], maxForWindowSize[i + 1]);
        }

        for (int i = 1; i <= n; i++) {
            result[i - 1] = maxForWindowSize[i];
        }

        return result;
    }
}
