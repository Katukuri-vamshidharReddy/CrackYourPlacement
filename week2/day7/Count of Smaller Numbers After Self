class Solution {
    public List<Integer> countSmaller(int[] nums) {
        int n = nums.length;
        List<Integer> result = new ArrayList<>();
        if (n == 0) return result;

        int[] sortedNums = Arrays.copyOf(nums, n);
        Arrays.sort(sortedNums);

        Map<Integer, Integer> rankMap = new HashMap<>();
        int rank = 1;
        for (int num : sortedNums) {
            rankMap.put(num, rank++);
        }

        int[] BIT = new int[n + 1];

        for (int i = n - 1; i >= 0; i--) {
            int currentRank = rankMap.get(nums[i]);
            result.add(query(BIT, currentRank - 1));
            update(BIT, currentRank, 1);
        }

        Collections.reverse(result);
        return result;
    }

    private int query(int[] BIT, int index) {
        int sum = 0;
        while (index > 0) {
            sum += BIT[index];
            index -= index & -index;
        }
        return sum;
    }

    private void update(int[] BIT, int index, int value) {
        while (index < BIT.length) {
            BIT[index] += value;
            index += index & -index;
        }
    }
}
