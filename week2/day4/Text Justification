class Solution {
    public List<String> fullJustify(String[] words, int maxWidth) {
        List<String> result = new ArrayList<>();
        List<String> currentLine = new ArrayList<>();
        int numOfLetters = 0;

        for (String word : words) {
            if (numOfLetters + word.length() + currentLine.size() > maxWidth) {
                result.add(justifyLine(currentLine, numOfLetters, maxWidth, false));
                currentLine = new ArrayList<>();
                numOfLetters = 0;
            }
            currentLine.add(word);
            numOfLetters += word.length();
        }
        result.add(justifyLine(currentLine, numOfLetters, maxWidth, true));

        return result;
    }

    private String justifyLine(List<String> words, int numOfLetters, int maxWidth, boolean isLastLine) {
        int numWords = words.size();
        int totalSpaces = maxWidth - numOfLetters;
        StringBuilder sb = new StringBuilder();

        if (numWords == 1 || isLastLine) {
            sb.append(words.get(0));
            for (int i = 1; i < numWords; i++) {
                sb.append(" ").append(words.get(i));
            }
            while (sb.length() < maxWidth) {
                sb.append(" ");
            }
        } else {
            int spacesBetweenWords = totalSpaces / (numWords - 1);
            int extraSpaces = totalSpaces % (numWords - 1);

            for (int i = 0; i < numWords; i++) {
                sb.append(words.get(i));
                if (i < numWords - 1) {
                    int spacesToAdd = spacesBetweenWords + (i < extraSpaces ? 1 : 0);
                    for (int j = 0; j < spacesToAdd; j++) {
                        sb.append(" ");
                    }
                }
            }
        }

        return sb.toString();
    }
}
