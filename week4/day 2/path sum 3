class Solution {
    public int pathSum(TreeNode root, int targetSum) {
        HashMap<Long, Integer> prefixSumMap = new HashMap<>();
        prefixSumMap.put(0L, 1); 
        return dfs(root, 0, targetSum, prefixSumMap);
    }
    
    private int dfs(TreeNode node, long currSum, int targetSum, HashMap<Long, Integer> prefixSumMap) {
        if (node == null) return 0;
        
        currSum += node.val;
        int count = prefixSumMap.getOrDefault(currSum - targetSum, 0);
        
        prefixSumMap.put(currSum, prefixSumMap.getOrDefault(currSum, 0) + 1);
        
        count += dfs(node.left, currSum, targetSum, prefixSumMap);
        count += dfs(node.right, currSum, targetSum, prefixSumMap);
        
        prefixSumMap.put(currSum, prefixSumMap.get(currSum) - 1); // Backtrack
        
        return count;
    }
}
